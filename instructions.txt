Advanced Operations on Python Lists

Objective: 
    - Understand Python lists by exploring more complex operations, such as list comprehension, slicing, and sorting, and analyzing their time and space complexities.

Problem Statement: 
    - Delve deeper into Python lists and master advanced operations. Implement various complex tasks using lists and analyze their efficiency in terms of time and space complexities.

Task 1:
    - Implement a function to create a new list using list comprehension that contains squares of numbers from 1 to n, where n is a parameter. Analyze the time and space complexity of this operation.

Task 2:
    - Implement a function to reverse a sublist within a list from index i to j (inclusive). Analyze the time and space complexity of this operation

Task 3:
    - Implement a function to merge two sorted lists into a single sorted list. Analyze the time and space complexity of this operation.

Expected Outcomes:
    - Students should demonstrate proficiency in using advanced list operations such as list comprehension, slicing, and sorting.
    - Students should be able to analyze the time and space complexities of complex list operations and understand their performance implications.
    - Students should develop problem-solving skills by tackling more complex tasks using Python lists.

General Tips:
    - Test your functions with different input sizes to observe their performance.
    - Utilize Python's built-in functions and methods for efficiency where appropriate.
    - Use resources like timeit module for measuring execution time and sys.getsizeof() for estimating memory usage.




Dictionary Manipulation and Optimization

Objective: 
    - Understand Python dictionaries by exploring advanced manipulation techniques and optimization strategies.

Problem Statement: 
    - Explore advanced manipulation techniques and optimization strategies for Python dictionaries. Implement various dictionary operations and optimize them for improved performance.

Task 1:
    - Implement a function to merge two dictionaries, preserving the values of common keys from the second dictionary. Analyze the time and space complexity of this operation.

Task 2:
    - Implement a function to find the intersection of two dictionaries, i.e., keys common to both dictionaries along with their values. Analyze the time and space complexity of this operation.

Task 3:
    - Implement a function to count the frequency of each unique word in a list using a dictionary. Analyze the time and space complexity of this operation.

Expected Outcomes:
    - Students should demonstrate proficiency in using advanced dictionary manipulation techniques and optimization strategies.
    - Students should be able to analyze the time and space complexities of complex dictionary operations and understand their performance implications.
    - Students should develop optimization skills by implementing efficient algorithms for dictionary manipulation.

General Tips:
    - Test your functions with different input sizes to observe their performance.
    - Utilize Python's built-in functions and methods for efficiency where appropriate.
    - Use resources like timeit module for measuring execution time and sys.getsizeof() for estimating memory usage.